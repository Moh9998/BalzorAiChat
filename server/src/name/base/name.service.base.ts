/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Name as PrismaName } from "@prisma/client";

export class NameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NameCountArgs, "select">): Promise<number> {
    return this.prisma.name.count(args);
  }

  async names<T extends Prisma.NameFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NameFindManyArgs>
  ): Promise<PrismaName[]> {
    return this.prisma.name.findMany<Prisma.NameFindManyArgs>(args);
  }
  async name<T extends Prisma.NameFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NameFindUniqueArgs>
  ): Promise<PrismaName | null> {
    return this.prisma.name.findUnique(args);
  }
  async createName<T extends Prisma.NameCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NameCreateArgs>
  ): Promise<PrismaName> {
    return this.prisma.name.create<T>(args);
  }
  async updateName<T extends Prisma.NameUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NameUpdateArgs>
  ): Promise<PrismaName> {
    return this.prisma.name.update<T>(args);
  }
  async deleteName<T extends Prisma.NameDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NameDeleteArgs>
  ): Promise<PrismaName> {
    return this.prisma.name.delete(args);
  }

  async findNames(
    parentId: string,
    args: Prisma.NameFindManyArgs
  ): Promise<PrismaName[]> {
    return this.prisma.name
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .names(args);
  }

  async getName(parentId: string): Promise<PrismaName | null> {
    return this.prisma.name
      .findUnique({
        where: { id: parentId },
      })
      .name();
  }
}
